/*
 * Copyright (c) 2019-2021 Mathias Doenitz
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package io.bullet.borer.site

import io.bullet.borer.derivation.MapBasedCodecs
import utest._

object CatsCompatSpec extends TestSuite {

  val tests = Tests {

    "Example" - {
      // #example
      import cats.data.Ior
      import io.bullet.borer.{Decoder, Encoder, Json}

      val value = List(
        Ior.Left(1),
        Ior.Right("foo"),
        Ior.Both(42, "bar")
      )

      // the Ior encoding of `borer-compat-circe` is optimized for efficiency
      {
        import io.bullet.borer.compat.cats._

        Json.encode(value).toUtf8String ==>
        """[[0,1],[1,"foo"],[2,42,"bar"]]"""
      }

      // the map-based codec generated by `borer-derivation` produces encodings
      // that self-describe better, but are less efficient space and time-wise
      {
        implicit def iorCodec[A: Encoder: Decoder, B: Encoder: Decoder] =
          MapBasedCodecs.deriveAllCodecs[Ior[A, B]]

        Json.encode(value).toUtf8String ==>
        """[{"Left":{"a":1}},{"Right":{"b":"foo"}},{"Both":{"a":42,"b":"bar"}}]"""
      }
      // #example
    }
  }
}
